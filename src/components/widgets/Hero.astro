---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative min-h-screen flex items-center not-prose" {...id ? { id } : {}}>
  <!-- Background with overlay -->
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <div class="absolute inset-0 bg-gradient-to-br from-slate-900/70 via-slate-800/60 to-slate-900/80"></div>
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>

  <!-- Content -->
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 w-full">
    <div class="py-12 md:py-20">
      <div class="grid lg:grid-cols-2 gap-12 items-center">
        <!-- Text Content -->
        <div class="text-center lg:text-left">
          {
            tagline && (
              <p
                class="text-lg text-orange-400 font-bold tracking-widest uppercase mb-4 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
                set:html={tagline}
              />
            )
          }
          {
            title && (
              <h1
                class="text-5xl md:text-7xl lg:text-8xl font-black leading-none tracking-tighter mb-6 font-heading text-white intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
                set:html={title}
              />
            )
          }
          <div class="max-w-3xl mx-auto lg:mx-0">
            {
              subtitle && (
                <p
                  class="text-xl md:text-2xl text-gray-200 mb-8 font-medium leading-relaxed intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
                  set:html={subtitle}
                />
              )
            }
            {
              actions && (
                <div class="flex flex-col sm:flex-row gap-4 lg:justify-start justify-center items-center mt-8 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
                  {Array.isArray(actions) ? (
                    actions.map((action, index) => (
                      <div class="w-full sm:w-auto">
                        <Button
                          {...(action || {})}
                          class={`w-full sm:w-auto text-lg px-10 py-5 ${
                            index === 0
                              ? 'bg-orange-500 hover:bg-orange-600 text-white border-orange-500 hover:border-orange-600 shadow-xl'
                              : 'bg-white hover:bg-gray-100 text-gray-900 border-white shadow-xl'
                          }`}
                        />
                      </div>
                    ))
                  ) : (
                    <Fragment set:html={actions} />
                  )}
                </div>
              )
            }
          </div>
          {content && <Fragment set:html={content} />}
        </div>

        <!-- Image Section -->
        <div class="relative lg:order-last">
          {
            image && (
              <div class="relative intersect-once intercept-no-queue intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
                {typeof image === 'string' ? (
                  <Fragment set:html={image} />
                ) : (
                  <Image
                    class="mx-auto rounded-xl w-full shadow-2xl"
                    widths={[400, 768, 1024]}
                    sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, 1024px"
                    loading="eager"
                    width={600}
                    height={400}
                    {...image}
                  />
                )}
              </div>
            )
          }
        </div>
      </div>
    </div>
  </div>

  <!-- Scroll indicator -->
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 text-white/70 animate-bounce">
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
    </svg>
  </div>
</section>
