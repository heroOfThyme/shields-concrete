---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 z-20 w-full">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-16 md:py-20 lg:py-0 lg:flex lg:items-center lg:gap-8 min-h-[70vh] lg:min-h-screen">
      <div
        class={`text-left pb-10 md:pb-16 mx-0 flex flex-col justify-end lg:justify-center min-h-[70vh] lg:min-h-auto ${image ? 'lg:basis-1/2' : 'lg:basis-1/2 lg:max-w-2xl'}`}
      >
        {
          tagline && (
            <p
              class="text-base font-bold tracking-wide uppercase intersect-once motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0 intersect-quarter"
              style="color: var(--aw-color-primary);"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading text-white intersect-once motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0 intersect-quarter"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto lg:max-w-none">
          {
            subtitle && (
              <div class="relative mb-6">
                <div
                  class="absolute left-0 top-0 w-1 h-full opacity-80"
                  style="background-color: var(--aw-color-primary);"
                />
                <p
                  class="text-xl text-white pl-6 intersect-once motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0 intersect-quarter"
                  set:html={subtitle}
                />
              </div>
            )
          }
          {
            actions && (
              <div class="flex flex-nowrap flex-col sm:flex-row gap-4 lg:justify-start intersect-once motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0 intersect-quarter">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex sm:w-auto">
                      <Button
                        {...(action || {})}
                        class="sm:mb-0 px-6 py-3 font-semibold transition-all duration-200"
                        style={
                          action.variant === 'primary'
                            ? 'background-color: var(--aw-color-primary); border-color: var(--aw-color-primary); color: white;'
                            : 'background-color: transparent; border-color: white; color: white;'
                        }
                        onmouseover={
                          action.variant === 'primary'
                            ? "this.style.backgroundColor='var(--aw-color-secondary)'; this.style.borderColor='var(--aw-color-secondary)';"
                            : "this.style.backgroundColor='rgba(255,255,255,0.1)';"
                        }
                        onmouseout={
                          action.variant === 'primary'
                            ? "this.style.backgroundColor='var(--aw-color-primary)'; this.style.borderColor='var(--aw-color-primary)';"
                            : "this.style.backgroundColor='transparent';"
                        }
                      />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
      {
        image && (
          <div class="basis-1/2 items-center justify-center hidden lg:flex">
            <div class="relative m-auto max-w-5xl intersect-once intercept-no-queue motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0 intersect-quarter">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="mx-auto rounded-lg w-full shadow-2xl"
                  widths={[400, 768, 1024, 2040]}
                  sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                  loading="eager"
                  width={600}
                  height={600}
                  {...image}
                />
              )}
            </div>
          </div>
        )
      }
    </div>
  </div>
</section>
